// Generated by nearley, version 2.20.1
// Edited by PalmDevs to TS
// RegExp to remove lexer.has(), use $1 to replace with: \(lexer.has\(.*?\) \? (\{ type: .*?\}) : .*?\)

import lexer from './lexer'

function id(x: any[]) { return x[0] }
function nulled() { return null }
function excludeNull(a: any[]) { return a.filter(v => v !== null) }

const grammar = {
    Lexer: lexer,
    ParserRules: [
        { "name": "globalBlock", "symbols": ["blockContent"] },
        { "name": "blockContent", "symbols": ["___", "content", "___"] },
        { "name": "blockContent$ebnf$1", "symbols": [] },
        { "name": "blockContent$ebnf$1$subexpression$1", "symbols": ["content", "____"] },
        { "name": "blockContent$ebnf$1", "symbols": ["blockContent$ebnf$1", "blockContent$ebnf$1$subexpression$1"], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "blockContent", "symbols": ["___", "blockContent$ebnf$1", "content", "___"] },
        { "name": "block", "symbols": [{ "literal": "{" }, "___", "blockContent", "___", { "literal": "}" }], "postprocess": ([, , block]: any[]) => block },
        { "name": "content", "symbols": ["statement"] },
        { "name": "content", "symbols": ["expression"] },
        { "name": "statement", "symbols": ["variableDeclaration"], "postprocess": id },
        { "name": "statement", "symbols": ["importStatement"] },
        { "name": "expression", "symbols": [{ type: "string" }] },
        { "name": "expression", "symbols": [{ type: "number" }] },
        { "name": "expression", "symbols": [{ type: "variable" }] },
        { "name": "declarable", "symbols": [{ type: "variable" }] },
        { "name": "declarable", "symbols": ["deStructure"] },
        { "name": "deStructure$ebnf$1", "symbols": [] },
        { "name": "deStructure$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", { "literal": ":" }, "_", { type: "variable" }] },
        { "name": "deStructure$ebnf$1$subexpression$1$ebnf$1", "symbols": ["deStructure$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id },
        { "name": "deStructure$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function () { return null } },
        { "name": "deStructure$ebnf$1$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "deStructure$ebnf$1$subexpression$1$ebnf$2$subexpression$1", "symbols": [{ "literal": "," }, "_"] },
        { "name": "deStructure$ebnf$1$subexpression$1$ebnf$2", "symbols": ["deStructure$ebnf$1$subexpression$1$ebnf$2", "deStructure$ebnf$1$subexpression$1$ebnf$2$subexpression$1"], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "deStructure$ebnf$1$subexpression$1", "symbols": ["_", { type: "variable" }, "deStructure$ebnf$1$subexpression$1$ebnf$1", "_", "deStructure$ebnf$1$subexpression$1$ebnf$2"] },
        { "name": "deStructure$ebnf$1", "symbols": ["deStructure$ebnf$1", "deStructure$ebnf$1$subexpression$1"], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "deStructure", "symbols": [{ "literal": "{" }, "deStructure$ebnf$1", { "literal": "}" }] },
        { "name": "deStructure$ebnf$2", "symbols": [] },
        { "name": "deStructure$ebnf$2$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "deStructure$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": [{ "literal": "," }, "_"] },
        { "name": "deStructure$ebnf$2$subexpression$1$ebnf$1", "symbols": ["deStructure$ebnf$2$subexpression$1$ebnf$1", "deStructure$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "deStructure$ebnf$2$subexpression$1", "symbols": ["_", { type: "variable" }, "_", { "literal": ":" }, "_", "deStructure", "_", "deStructure$ebnf$2$subexpression$1$ebnf$1"] },
        { "name": "deStructure$ebnf$2", "symbols": ["deStructure$ebnf$2", "deStructure$ebnf$2$subexpression$1"], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "deStructure", "symbols": [{ "literal": "{" }, "deStructure$ebnf$2", { "literal": "}" }] },
        { "name": "deStructure$ebnf$3", "symbols": [] },
        { "name": "deStructure$ebnf$3$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "deStructure$ebnf$3$subexpression$1$ebnf$1$subexpression$1", "symbols": [{ "literal": "," }, "_"] },
        { "name": "deStructure$ebnf$3$subexpression$1$ebnf$1", "symbols": ["deStructure$ebnf$3$subexpression$1$ebnf$1", "deStructure$ebnf$3$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "deStructure$ebnf$3$subexpression$1", "symbols": ["_", { type: "variable" }, "_", "deStructure$ebnf$3$subexpression$1$ebnf$1"] },
        { "name": "deStructure$ebnf$3", "symbols": ["deStructure$ebnf$3", "deStructure$ebnf$3$subexpression$1"], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "deStructure", "symbols": [{ "literal": "[" }, "deStructure$ebnf$3", { "literal": "]" }] },
        { "name": "deStructure$ebnf$4", "symbols": [] },
        { "name": "deStructure$ebnf$4$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "deStructure$ebnf$4$subexpression$1$ebnf$1$subexpression$1", "symbols": [{ "literal": "," }, "_"] },
        { "name": "deStructure$ebnf$4$subexpression$1$ebnf$1", "symbols": ["deStructure$ebnf$4$subexpression$1$ebnf$1", "deStructure$ebnf$4$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "deStructure$ebnf$4$subexpression$1", "symbols": ["_", "deStructure", "_", "deStructure$ebnf$4$subexpression$1$ebnf$1"] },
        { "name": "deStructure$ebnf$4", "symbols": ["deStructure$ebnf$4", "deStructure$ebnf$4$subexpression$1"], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "deStructure", "symbols": [{ "literal": "[" }, "deStructure$ebnf$4", { "literal": "]" }] },
        { "name": "variableDeclaration", "symbols": [{ type: "declarationKeyword" }, "__", "declarable", "_", { "literal": "=" }, "_", "expression"] },
        { "name": "variableDeclaration", "symbols": ["declarable", "_", { "literal": "=" }, "_", "expression"] },
        { "name": "importStatement$subexpression$1", "symbols": [{ "literal": "import" }] },
        { "name": "importStatement$subexpression$1", "symbols": [{ "literal": "import*" }] },
        { "name": "importStatement$subexpression$2", "symbols": [{ type: "variable" }] },
        { "name": "importStatement$subexpression$2", "symbols": ["deStructure"] },
        { "name": "importStatement", "symbols": ["importStatement$subexpression$1", "__", { type: "importStatementType" }, "__", { type: "string" }, { "literal": "as" }, "importStatement$subexpression$2"] },
        { "name": "importStatement", "symbols": [{ "literal": "import" }, "__", { type: "importStatementType" }, "__", { type: "string" }] },
        { "name": "_$ebnf$1", "symbols": [] },
        { "name": "_$ebnf$1", "symbols": ["_$ebnf$1", { type: "space" }], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "_", "symbols": ["_$ebnf$1"], "postprocess": id },
        { "name": "__$ebnf$1", "symbols": [{ type: "space" }] },
        { "name": "__$ebnf$1", "symbols": ["__$ebnf$1", { type: "space" }], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "__", "symbols": ["__$ebnf$1"], "postprocess": id },
        { "name": "___$ebnf$1", "symbols": [] },
        { "name": "___$ebnf$1$subexpression$1", "symbols": [{ type: "space" }] },
        { "name": "___$ebnf$1$subexpression$1", "symbols": [{ type: "newLine" }] },
        { "name": "___$ebnf$1$subexpression$1", "symbols": [{ type: "semiColon" }] },
        { "name": "___$ebnf$1", "symbols": ["___$ebnf$1", "___$ebnf$1$subexpression$1"], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "___", "symbols": ["___$ebnf$1"], "postprocess": id },
        { "name": "____$ebnf$1$subexpression$1", "symbols": [{ type: "space" }] },
        { "name": "____$ebnf$1$subexpression$1", "symbols": [{ type: "newLine" }] },
        { "name": "____$ebnf$1$subexpression$1", "symbols": [{ type: "semiColon" }] },
        { "name": "____$ebnf$1", "symbols": ["____$ebnf$1$subexpression$1"] },
        { "name": "____$ebnf$1$subexpression$2", "symbols": [{ type: "space" }] },
        { "name": "____$ebnf$1$subexpression$2", "symbols": [{ type: "newLine" }] },
        { "name": "____$ebnf$1$subexpression$2", "symbols": [{ type: "semiColon" }] },
        { "name": "____$ebnf$1", "symbols": ["____$ebnf$1", "____$ebnf$1$subexpression$2"], "postprocess": function arrpush(d: any[]) { return d[0].concat([d[1]]) } },
        { "name": "____", "symbols": ["____$ebnf$1"], "postprocess": id }
    ],
    ParserStart: "globalBlock"
}

export default grammar
